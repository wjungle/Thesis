[General]
network = mqtt.Mqtt
#record-eventlog = true
#simtime-scale = -6
sim-time-limit = 10000s  #1000000s 1000000000s 500000s 68400s
#cpu-time-limit = 3s
repeat = 3



#[Config Default]
Mqtt.sensor[*].timeout = 10s
Mqtt.gw.gateway.timeout = 10s
Mqtt.sensor[*].limit = 3times
Mqtt.gw.gateway.limit = 3times

Mqtt.sensor[*].pubIaTimeExpon = exponential(5s)	#${50, 100}		#1.0/0.1 
Mqtt.sensor[*].pubIaTimeFixed = 1s					#${1,10,60}

# RTT	
Mqtt.sensor[*].out.channel.IaTime = exponential(0.9s)
#Mqtt.sensor[*].out.channel.gammaAlpha = ${wAlpha=0.1}
#Mqtt.sensor[*].out.channel.gammaBeta = ${wBeta=40}
Mqtt.sensor[*].out.channel.gammaConst = ${wConst=0.05}
Mqtt.sensor[*].out.channel.mean = ${wMean=1, 2.5, 5, 10}#
#Mqtt.sensor[*].out.channel.bVar = ${wVar = 0.001}#0.001, 0.01, 0.1, 1, 10, 100, 1000
#Mqtt.sensor[*].out.channel.coefficient = ${wCoeff=0.05, 0.1, 0.5, 1, 1.5, 2, 2.5, 3, 4, 5, 10}

Mqtt.broker.out.channel.IaTime = exponential(0.7s)
Mqtt.broker.out.channel.gammaAlpha = ${bAlpha=4}
Mqtt.broker.out.channel.gammaBeta =${bBeta=40}
Mqtt.broker.out.channel.gammaConst = ${bConst=0.1}

Mqtt.gw.portBk$o.channel.IaTime = exponential(0.7s)
Mqtt.gw.portBk$o.channel.gammaAlpha = ${bAlpha}
Mqtt.gw.portBk$o.channel.gammaBeta = ${bBeta}
Mqtt.gw.portBk$o.channel.gammaConst = ${bConst}

Mqtt.gw.port$o[*].channel.IaTime = exponential(0.9s)
#Mqtt.gw.port$o[*].channel.gammaAlpha = ${wAlpha}
#Mqtt.gw.port$o[*].channel.gammaBeta = ${wBeta}
Mqtt.gw.port$o[*].channel.gammaConst = ${wConst}
Mqtt.gw.port$o[*].channel.mean = ${wMean}
#Mqtt.gw.port$o[*].channel.bVar = ${wVar}
#Mqtt.gw.port$o[*].channel.coefficient = ${wCoeff}

*.*.*.channel.rttSource = ${1}

#PLR
Mqtt.sensor[*].out.channel.PLR = ${plr=0.0, 0.05, 0.1}	#0.0, 0.05, 0.1
Mqtt.broker.out.channel.PLR = 0.0
Mqtt.gw.portBk$o.channel.PLR = 0.0
Mqtt.gw.port$o[0..].channel.PLR = ${plr}


Mqtt.numSensors = ${nS=1,30}#=1, 10..100 step 10 ! wConst    #..100 step 10 ! const        #${40..100 step 10}	# ${1, 2, 5, 10..50 step 10}
Mqtt.gw.numSensors = ${nS}


#sensor publish discipline
#0: persistent discipline; 
#1: CoAP discipline
Mqtt.sensor[*].discipline = 1

#rtoInitMethod (sensor method)
#0: fixed RTO; 
#1: random 2~3;
#2: calculated rto, if not sample, init = 1;
#3: calculated rto, if not sample, init = 2;
Mqtt.sensor[*].rtoInitMethod = 1

#rtoMultMethod (sensor method)
#0: fixed
#1: back-off, i.e. *2
#2: dependence with initial rto
Mqtt.sensor[*].rtoMultMethod = 1

#rtoCalcMethod (sensor method)
#0: no operation
#1: 6298
#2: CoCoA+
#3: gateway-assistented
Mqtt.sensor[*].rtoCalcMethod = 0

#gateway method=0: fixed RTO; 
#method=1: back-off; 
#method=2: depend rto init
Mqtt.gw.gateway.method = 0

Mqtt.sensor[*].overhearing = 0
Mqtt.gw.manager.broadcast = 0

Mqtt.sensor[*].range = ${range=32}
Mqtt.gw.gateway.range=${range}
Mqtt.gw.manager.range=${range}
#**.quanSize = 1024 

[Config MQTT-SN]
description = "MQTT-SN protocol"
Mqtt.sensor[*].discipline = 0
Mqtt.sensor[*].rtoInitMethod = 0
Mqtt.sensor[*].rtoMultMethod = 0
Mqtt.sensor[*].rtoCalcMethod = 0
Mqtt.gw.gateway.method = 1

[Config CoAP]
description = "CoAP protocol"
Mqtt.sensor[*].discipline = 1
Mqtt.sensor[*].rtoInitMethod = 1
Mqtt.sensor[*].rtoMultMethod = 1
Mqtt.sensor[*].rtoCalcMethod = 0
Mqtt.gw.gateway.method = 1

[Config RFC6298]
description = "General RFC 6298"
Mqtt.sensor[*].discipline = 1
Mqtt.sensor[*].rtoInitMethod = 2
Mqtt.sensor[*].rtoMultMethod = 1
Mqtt.sensor[*].rtoCalcMethod = 1
Mqtt.gw.gateway.method = 1

[Config CoCoAplus]
description = "CoAP protocol enhanced: CoCoA+"
Mqtt.sensor[*].discipline = 1
Mqtt.sensor[*].rtoInitMethod = 3
Mqtt.sensor[*].rtoMultMethod = 2
Mqtt.sensor[*].rtoCalcMethod = 2
Mqtt.gw.gateway.method = 1

[Config thesis]
description = "thesis: gateway-assistented"
Mqtt.sensor[*].discipline = 1
Mqtt.sensor[*].rtoInitMethod = 3
Mqtt.sensor[*].rtoMultMethod = 2
Mqtt.sensor[*].rtoCalcMethod = 3
Mqtt.sensor[*].overhearing = 1
Mqtt.gw.gateway.method = 1
Mqtt.gw.manager.broadcast = 1
# broadcast=1 =>yes; =0=>no
